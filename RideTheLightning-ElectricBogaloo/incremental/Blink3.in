//2015/08/13 
//#include <Servo.h>

//Servo servo_0, servo_1, servo_2;
//const int servo_0_pin = 10;
//const int servo_1_pin = 11;
//const int servo_2_pin = 11;
int p0 = 90;
int p1 = 90;
int p2 = 130;

int led = 13;
const int LED_WHITE = 47;
const int LED_YELLOW = 46;
const int LED_RED = 40;
const int LED_GREEN = 41;
const int LED_RIGHT = 28;
const int LED_CENTER = 29;
const int LED_LEFT = 30;

int IR_threshold = 300;
int IR_left_val, IR_right_val, IR_center_val;
const int IR_LEFT = A0;
const int IR_CENTER = A1;
const int IR_RIGHT = A2;

int state;
const int STOP = 0;
const int TL = 1;
const int STRAIGHT = 2;
const int TR = 3;
const int CTL = 4;
const int CSTRAIGHT = 5;
const int CTR = 6;

float freq = 2;
float amp0 = 60;
float amp1 = 80;
float amp2 = 80;
float phase1 = 1.57;
float phase2 = 1.57;

float smooth_constant = 20;
float turn_duration = 1.5*6.28/freq*1000;//three cycles of CSwim at least
float turn_time;

// the setup routine runs once when you press reset:
void setup() {      
  Serial.begin(9600);  
  Serial1.begin(38400);
  while (!Serial1){
    ;
  }

  pinMode(LED_CENTER, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_LEFT, OUTPUT);
  pinMode(LED_RIGHT, OUTPUT);
  pinMode(LED_WHITE, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(led, OUTPUT);
  //servo_0.attach(servo_0_pin);
  //servo_1.attach(servo_1_pin);
  //servo_2.attach(servo_2_pin);
  //servo_0.write(p0);
  //servo_1.write(p1);
  //servo_2.write(p2);
  //nictare();
  digitalWrite(LED_WHITE, HIGH);
  digitalWrite(LED_RED, HIGH);
  Serial.println("waiting to establish contact");
  establish_contact();
  Serial.println("roger");
}

// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(LED_WHITE, HIGH);   // turn the LED on (HIGH is the voltage level)
  read_IRs();
  set_directionals();
  parse_commands();
  delay(30);               // wait for a second
  if (IR_center_val>240)
  {
    digitalWrite(LED_CENTER, HIGH);
    digitalWrite(LED_GREEN, LOW);
    Serial1.println("Found!");
    Serial1.println(IR_center_val);
  }
  else
  {
    digitalWrite(LED_CENTER, LOW);
    digitalWrite(LED_GREEN, HIGH);
  }
//  Serial.println(Serial1.read());
  digitalWrite(LED_WHITE, LOW);    // turn the LED off by making the voltage LOW
  //write_servo_pos();
  delay(30);               // wait for a second
}

void establish_contact(){
  while (Serial1.available() <= 0) {
    delay(30);
  }
  Serial1.println("EGO RANUNCULUS EXPERGISCOR");
}

void nictare(){
  digitalWrite(LED_GREEN, HIGH);
  digitalWrite(LED_RED, HIGH);
  digitalWrite(LED_WHITE, HIGH);
  digitalWrite(LED_YELLOW, HIGH);
  digitalWrite(LED_LEFT, HIGH);
  digitalWrite(LED_CENTER, HIGH);
  digitalWrite(LED_RIGHT, HIGH);
  delay(1000);
  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_RED, LOW);
  digitalWrite(LED_WHITE, LOW);
  digitalWrite(LED_YELLOW, LOW);
  digitalWrite(LED_LEFT, LOW);
  digitalWrite(LED_CENTER, LOW);
  digitalWrite(LED_RIGHT, LOW);
  //Serial1.println("Nico");
}
void dormire(){
  boolean sleeping = true;
  while(sleeping){
    Serial1.println("DORMIO");
    digitalWrite(LED_WHITE, HIGH);
    delay(200);
    digitalWrite(LED_WHITE, LOW);
    delay(2000);
    if (Serial1.available()){
    char terminate = '!';
    String incoming = Serial1.readStringUntil(terminate);
    if (incoming=="EXPERGISCERE"){ 
      Serial1.println("EXPERGISCOR");  
      sleeping = false;
    }
    }
  }
}
void dicere(){
  Serial1.println("DICO");
  Serial1.print("IR LEFT: ");
  Serial1.print(IR_left_val);
  Serial1.print("; IR CENTER: ");
  Serial1.print(IR_center_val);
  Serial1.print("; IR RIGHT: ");
  Serial1.println(IR_right_val);
  Serial1.print("P0: ");
  Serial1.print(p0);
  Serial1.print("; P1: ");
  Serial1.print(p1);
  Serial1.print("; P2: ");
  Serial1.println(p2);
}

void read_IRs(){
  IR_left_val = analogRead(IR_LEFT);
  IR_right_val = analogRead(IR_RIGHT);
  IR_center_val = analogRead(IR_CENTER);
}
void set_directionals(){
  if (IR_left_val>IR_threshold){
    digitalWrite(LED_LEFT, HIGH);}
  else{
    digitalWrite(LED_LEFT, LOW);}
  if (IR_right_val>IR_threshold){
    digitalWrite(LED_RIGHT, HIGH);}
  else{
    digitalWrite(LED_RIGHT, LOW);}
  if (IR_center_val>IR_threshold){
    digitalWrite(LED_CENTER, HIGH);}
  else{
    digitalWrite(LED_CENTER, LOW);}
}
void parse_commands(){
  if (Serial1.available())
  {
    char terminate = '!';
    String incoming = Serial1.readStringUntil(terminate);
    Serial1.println(incoming);
    if (incoming=="NICTERE"){   
      nictare();
      Serial1.println("Nico");} 
    if (incoming=="DORMI"){
      dormire();}
    if (incoming=="DIC"){
      dicere();}   
    if (incoming=="SINISTER"){
      p2 = 80;}
    if (incoming=="DEXTER"){
      p2 = 100;}
  }
}
/*void write_servo_pos()
{
  servo_0.write(p0);
  servo_1.write(p1);
  servo_2.write(p2);
}*/
/*
void write_servo_pos_smoothed()
{
  if (abs(p0-servo_0.read())>smooth_constant)
  {
    int sgn = (p0-servo_0.read())/abs(p0-servo_0.read());
    p0 = p0 - sgn*smooth_constant;
  }
  if (abs(p1-servo_1.read())>smooth_constant)
  {
    int sgn = (p1-servo_1.read())/abs(p1-servo_1.read());
    p1 = p1 - sgn*smooth_constant;
  }
  if (abs(p2-servo_2.read())>smooth_constant)
  {
    int sgn = (p2-servo_2.read())/abs(p2-servo_2.read());
    p2 = p2 - sgn*smooth_constant;
  }
  servo_0.write(p0);
  servo_1.write(p1);
  servo_2.write(p2);
}*/
